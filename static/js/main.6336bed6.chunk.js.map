{"version":3,"sources":["components/Cockpit/Cockpit.module.css","containers/App.module.css","components/Persons/Person/Person.module.css","components/Persons/Person/Person.js","components/Persons/Persons.js","components/Cockpit/Cockpit.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["module","exports","person","props","className","classes","Person","onClick","click","name","age","children","type","onChange","changed","value","persons","map","index","clicked","key","id","event","cockpit","assignedClasses","btnClass","showPersons","Red","length","push","red","bold","Cockpit","join","App","state","otherState","deletePersonHandler","personIndex","splice","setState","nameChangedHandler","findIndex","p","target","togglePersonsHandler","doesShow","this","Persons","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6336bed6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"Cockpit_red__3j1Uz\",\"bold\":\"Cockpit_bold__3IEKG\",\"Cockpit\":\"Cockpit_Cockpit__3RhTH\",\"Red\":\"Cockpit_Red__3_7R0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3g58f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person_Person__3raon\"};","import React from 'react';\r\nimport classes from './Person.module.css';\r\nconst person = (props) => {\r\n\r\n    return (\r\n        <div className={classes.Person} >\r\n            <p onClick={props.click}>I'm {props.name} and I am {props.age} years old!</p>\r\n            <p>{props.children}</p>\r\n            <input type=\"text\" onChange={props.changed} value={props.name}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default person;","import React from 'react';\r\nimport Person from './Person/Person';\r\n\r\nconst persons = (props) => props.persons.map((person, index) => {\r\n        return <Person\r\n            click={() => props.clicked(index)}\r\n            name={person.name}\r\n            age={person.age}\r\n            key={person.id}\r\n            changed={(event) => props.changed(event, person.id)}\r\n        />\r\n    });\r\n\r\n\r\nexport default persons;","import React from 'react';\r\nimport classes from \"./Cockpit.module.css\";\r\n\r\nconst cockpit = (props) => {\r\n\r\n    const assignedClasses = [];\r\n    let btnClass = '';\r\n    \r\n    if(props.showPersons){\r\n        btnClass = classes.Red;\r\n    }\r\n\r\n    if (props.persons.length <= 2){\r\n        assignedClasses.push(classes.red);\r\n    }\r\n    if (props.persons.length <= 1){\r\n        assignedClasses.push(classes.bold);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Cockpit}>\r\n            <h1>Hi, I'm a React App</h1>\r\n            <p className={assignedClasses.join(' ')}>This is really working!</p>\r\n            <button\r\n                className={btnClass}\r\n                onClick={props.clicked}>Toggle Persons</button>\r\n        </div>\r\n\r\n    );\r\n\r\n};\r\n\r\nexport default cockpit;","import React, { Component } from 'react';\r\nimport classes from './App.module.css';\r\nimport Persons from '../components/Persons/Persons';\r\nimport Cockpit from '../components/Cockpit/Cockpit';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        persons: [\r\n            { id: '1', name: 'Max', age: 28 },\r\n            { id: '2', name: 'Marc', age: 24 },\r\n            { id: '3', name: 'John', age: 7 }\r\n        ],\r\n        otherState: 'some other value',\r\n        showPersons: false\r\n    };\r\n\r\n    deletePersonHandler = (personIndex) => {\r\n        //const persons = this.state.persons.slice(); //slice without args makes a copy\r\n        const persons = [...this.state.persons]; //copy using next-gen\r\n        persons.splice(personIndex, 1);\r\n        this.setState({ persons: persons });\r\n    };\r\n\r\n    nameChangedHandler = (event, id) => {\r\n        const personIndex = this.state.persons.findIndex(p => {\r\n            return p.id === id;\r\n        });\r\n\r\n        const person = {\r\n            ...this.state.persons[personIndex]\r\n        };\r\n\r\n        person.name = event.target.value;\r\n\r\n        const persons = [...this.state.persons];\r\n        persons[personIndex] = person;\r\n\r\n        this.setState({ persons: persons });\r\n    };\r\n    togglePersonsHandler = () => {\r\n        const doesShow = this.state.showPersons;\r\n        this.setState({ showPersons: !doesShow });\r\n    }\r\n\r\n    render() {\r\n        let persons = null;\r\n\r\n        if (this.state.showPersons) {\r\n            persons = (<Persons persons={this.state.persons}\r\n                    clicked={this.deletePersonHandler}\r\n                    changed={this.nameChangedHandler} />\r\n            );\r\n        }\r\n        return (\r\n            <div className={classes.App}>\r\n                <Cockpit showPersons={this.state.showPersons}\r\n                    persons={this.state.persons}\r\n                    clicked={this.togglePersonsHandler} />\r\n                {persons}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}